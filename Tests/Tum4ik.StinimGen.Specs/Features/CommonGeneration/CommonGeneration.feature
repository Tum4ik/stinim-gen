Feature: Common generation


Background:
  Given source declaration
    """
    namespace Common.Generation;
    public static class SomeStaticClass { }
    """


Scenario: Default interface and implementation files generation
  Given attribute usage
    """
    using Tum4ik.StinimGen.Attributes;
    using Common.Generation;
    namespace Attribute.Usage;
    [IIFor(typeof(SomeStaticClass), WrapperClassName = "SomeStaticClassWrapper")]
    public partial interface ISomeStaticClass { }
    """
  When run generator
  Then there must not be generation exception
  And generated interface file must be
    """
    // <auto-generated/>
    #nullable enable
    namespace Attribute.Usage;
    [global::System.CodeDom.Compiler.GeneratedCode("StinimGen", "<version>")]
    partial interface ISomeStaticClass
    {
    }
    """
  And generated implementation file must be
    """
    // <auto-generated/>
    #nullable enable
    namespace Attribute.Usage;
    [global::System.CodeDom.Compiler.GeneratedCode("StinimGen", "<version>")]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal sealed class SomeStaticClassWrapper : ISomeStaticClass
    {
    }
    """


Scenario: Implementation wrapper generation when IsPublic=false
  Given attribute usage
    """
    using Tum4ik.StinimGen.Attributes;
    using Common.Generation;
    namespace Attribute.Usage;
    [IIFor(typeof(SomeStaticClass), WrapperClassName = "SomeStaticClassWrapper", IsPublic = false)]
    public partial interface ISomeStaticClass { }
    """
  When run generator
  Then there must not be generation exception
  And generated implementation must be
    """
    internal sealed class SomeStaticClassWrapper : ISomeStaticClass
    {
    }
    """


Scenario: Implementation wrapper generation when IsPublic=true
  Given attribute usage
    """
    using Tum4ik.StinimGen.Attributes;
    using Common.Generation;
    namespace Attribute.Usage;
    [IIFor(typeof(SomeStaticClass), WrapperClassName = "SomeStaticClassWrapper", IsPublic = true)]
    public partial interface ISomeStaticClass { }
    """
  When run generator
  Then there must not be generation exception
  And generated implementation must be
    """
    public sealed class SomeStaticClassWrapper : ISomeStaticClass
    {
    }
    """


Scenario: Implementation wrapper generation when IsSealed=false
  Given attribute usage
    """
    using Tum4ik.StinimGen.Attributes;
    using Common.Generation;
    namespace Attribute.Usage;
    [IIFor(typeof(SomeStaticClass), WrapperClassName = "SomeStaticClassWrapper", IsSealed = false)]
    public partial interface ISomeStaticClass { }
    """
  When run generator
  Then there must not be generation exception
  And generated implementation must be
    """
    internal class SomeStaticClassWrapper : ISomeStaticClass
    {
    }
    """


Scenario: Implementation wrapper generation when IsSealed=true
  Given attribute usage
    """
    using Tum4ik.StinimGen.Attributes;
    using Common.Generation;
    namespace Attribute.Usage;
    [IIFor(typeof(SomeStaticClass), WrapperClassName = "SomeStaticClassWrapper", IsSealed = true)]
    public partial interface ISomeStaticClass { }
    """
  When run generator
  Then there must not be generation exception
  And generated implementation must be
    """
    internal sealed class SomeStaticClassWrapper : ISomeStaticClass
    {
    }
    """


Scenario: Implementation wrapper generation when IsPartial=false and IsSealed=false
  Given attribute usage
    """
    using Tum4ik.StinimGen.Attributes;
    using Common.Generation;
    namespace Attribute.Usage;
    [IIFor(typeof(SomeStaticClass), WrapperClassName = "SomeStaticClassWrapper", IsPartial = false, IsSealed = false)]
    public partial interface ISomeStaticClass { }
    """
  When run generator
  Then there must not be generation exception
  And generated implementation must be
    """
    internal class SomeStaticClassWrapper : ISomeStaticClass
    {
    }
    """


Scenario: Implementation wrapper generation when IsPartial=true and IsSealed=false
  Given attribute usage
    """
    using Tum4ik.StinimGen.Attributes;
    using Common.Generation;
    namespace Attribute.Usage;
    [IIFor(typeof(SomeStaticClass), WrapperClassName = "SomeStaticClassWrapper", IsPartial = true, IsSealed = false)]
    public partial interface ISomeStaticClass { }
    """
  When run generator
  Then there must not be generation exception
  And generated implementation must be
    """
    internal partial class SomeStaticClassWrapper : ISomeStaticClass
    {
    }
    """


Scenario: Implementation wrapper generation when IsPublic=false and IsSealed=false
  Given attribute usage
    """
    using Tum4ik.StinimGen.Attributes;
    using Common.Generation;
    namespace Attribute.Usage;
    [IIFor(typeof(SomeStaticClass), WrapperClassName = "SomeStaticClassWrapper", IsPublic = false, IsSealed = false)]
    public partial interface ISomeStaticClass { }
    """
  When run generator
  Then there must not be generation exception
  And generated implementation must be
    """
    internal class SomeStaticClassWrapper : ISomeStaticClass
    {
    }
    """


Scenario: Implementation wrapper generation when IsPublic=true and IsSealed=true
  Given attribute usage
    """
    using Tum4ik.StinimGen.Attributes;
    using Common.Generation;
    namespace Attribute.Usage;
    [IIFor(typeof(SomeStaticClass), WrapperClassName = "SomeStaticClassWrapper", IsPublic = true, IsSealed = true)]
    public partial interface ISomeStaticClass { }
    """
  When run generator
  Then there must not be generation exception
  And generated implementation must be
    """
    public sealed class SomeStaticClassWrapper : ISomeStaticClass
    {
    }
    """


Scenario: Implementation wrapper generation when IsPartial=true and IsSealed=true
  Given attribute usage
    """
    using Tum4ik.StinimGen.Attributes;
    using Common.Generation;
    namespace Attribute.Usage;
    [IIFor(typeof(SomeStaticClass), WrapperClassName = "SomeStaticClassWrapper", IsPartial = true, IsSealed = true)]
    public partial interface ISomeStaticClass { }
    """
  When run generator
  Then there must not be generation exception
  And generated implementation must be
    """
    internal sealed partial class SomeStaticClassWrapper : ISomeStaticClass
    {
    }
    """


Scenario: Forward the Obsolete attribute for the generated interface and implementation wrapper
  Given source declaration
    """
    using System;
    namespace Common.Generation;
    [Obsolete("Use something other")]
    public static class ObsoleteClass { }
    """
  And attribute usage
    """
    using Tum4ik.StinimGen.Attributes;
    using Common.Generation;
    namespace Attribute.Usage;
    [IIFor(typeof(ObsoleteClass), WrapperClassName = "ObsoleteClassWrapper")]
    public partial interface IObsoleteClass { }
    """
  When run generator
  Then there must not be generation exception
  And generated interface file must be
    """
    // <auto-generated/>
    #nullable enable
    namespace Attribute.Usage;
    [global::System.CodeDom.Compiler.GeneratedCode("StinimGen", "<version>")]
    [global::System.ObsoleteAttribute("Use something other")]
    partial interface IObsoleteClass
    {
    }
    """
  And generated implementation file must be
    """
    // <auto-generated/>
    #nullable enable
    namespace Attribute.Usage;
    [global::System.CodeDom.Compiler.GeneratedCode("StinimGen", "<version>")]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.ObsoleteAttribute("Use something other")]
    internal sealed class ObsoleteClassWrapper : IObsoleteClass
    {
    }
    """
