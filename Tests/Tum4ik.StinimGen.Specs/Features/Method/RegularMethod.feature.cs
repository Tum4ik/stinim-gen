// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tum4ik.StinimGen.Specs.Features.Method
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RegularMethodFeature : object, Xunit.IClassFixture<RegularMethodFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RegularMethod.feature"
#line hidden
        
        public RegularMethodFeature(RegularMethodFeature.FixtureData fixtureData, Tum4ik_StinimGen_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Method", "Regular method", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
  testRunner.Given("source declaration", "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing Syste" +
                    "m.Threading.Tasks;\r\nnamespace Methods;\r\npublic class MethodHolder\r\n{\r\n  <member>" +
                    "\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
  testRunner.And("attribute usage", "using Tum4ik.StinimGen.Attributes;\r\nusing Methods;\r\nnamespace Attribute.Usage;\r\n[" +
                    "IIFor(typeof(MethodHolder), \"MethodHolderWrapper\")]\r\ninternal partial interface " +
                    "IMethodHolder { }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Void method without parameters")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Void method without parameters")]
        public void VoidMethodWithoutParameters()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Void method without parameters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 28
  testRunner.Given("source member declaration", "public static void Method() { }", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
  testRunner.Then("generated interface member must be", "void Method();", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
  testRunner.And("generated implementation member must be", "public void Method() => Methods.MethodHolder.Method();", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Method without parameters returns keyworded type")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Method without parameters returns keyworded type")]
        public void MethodWithoutParametersReturnsKeywordedType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method without parameters returns keyworded type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 45
  testRunner.Given("source member declaration", "public static string Method() => string.Empty;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 49
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
  testRunner.Then("generated interface member must be", "string Method();", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
  testRunner.And("generated implementation member must be", "public string Method() => Methods.MethodHolder.Method();", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Method without parameters returns keyworded nullable type")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Method without parameters returns keyworded nullable type")]
        public void MethodWithoutParametersReturnsKeywordedNullableType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method without parameters returns keyworded nullable type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 62
  testRunner.Given("source member declaration", "public static string? Method() => null;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 66
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
  testRunner.Then("generated interface member must be", "string? Method();", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
  testRunner.And("generated implementation member must be", "public string? Method() => Methods.MethodHolder.Method();", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Method without parameters returns non-nullable type")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Method without parameters returns non-nullable type")]
        public void MethodWithoutParametersReturnsNon_NullableType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method without parameters returns non-nullable type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 79
  testRunner.Given("source member declaration", "public static StringBuilder Method() => new();", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
  testRunner.Then("generated interface member must be", "global::System.Text.StringBuilder Method();", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
  testRunner.And("generated implementation member must be", "public global::System.Text.StringBuilder Method() => Methods.MethodHolder.Method(" +
                        ");", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Method without parameters returns nullable type")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Method without parameters returns nullable type")]
        public void MethodWithoutParametersReturnsNullableType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method without parameters returns nullable type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 96
  testRunner.Given("source member declaration", "public static StringBuilder? Method() => null;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 100
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
  testRunner.Then("generated interface member must be", "global::System.Text.StringBuilder? Method();", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
  testRunner.And("generated implementation member must be", "public global::System.Text.StringBuilder? Method() => Methods.MethodHolder.Method" +
                        "();", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Async void method without parameters")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Async void method without parameters")]
        public void AsyncVoidMethodWithoutParameters()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Async void method without parameters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 113
  testRunner.Given("source member declaration", "public static async void MethodAsync() => await Task.CompletedTask;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 117
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
  testRunner.Then("generated interface member must be", "void MethodAsync();", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
  testRunner.And("generated implementation member must be", "public void MethodAsync() => Methods.MethodHolder.MethodAsync();", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Async method without parameters returns Task")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Async method without parameters returns Task")]
        public void AsyncMethodWithoutParametersReturnsTask()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Async method without parameters returns Task", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 130
  testRunner.Given("source member declaration", "public static async Task MethodAsync() => await Task.CompletedTask;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 134
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 135
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 136
  testRunner.Then("generated interface member must be", "global::System.Threading.Tasks.Task MethodAsync();", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 140
  testRunner.And("generated implementation member must be", "public global::System.Threading.Tasks.Task MethodAsync() => Methods.MethodHolder." +
                        "MethodAsync();", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Method without parameters returns Taks of keyworded type")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Method without parameters returns Taks of keyworded type")]
        public void MethodWithoutParametersReturnsTaksOfKeywordedType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method without parameters returns Taks of keyworded type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 146
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 147
  testRunner.Given("source member declaration", "public static async Task<string> MethodAsync() => await Task.FromResult(string.Em" +
                        "pty);", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 151
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 152
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 153
  testRunner.Then("generated interface member must be", "global::System.Threading.Tasks.Task<string> MethodAsync();", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 157
  testRunner.And("generated implementation member must be", "public global::System.Threading.Tasks.Task<string> MethodAsync() => Methods.Metho" +
                        "dHolder.MethodAsync();", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Method without parameters returns Task of keyworded nullable type")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Method without parameters returns Task of keyworded nullable type")]
        public void MethodWithoutParametersReturnsTaskOfKeywordedNullableType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method without parameters returns Task of keyworded nullable type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 163
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 164
  testRunner.Given("source member declaration", "public static async Task<string?> MethodAsync() => await Task.FromResult(string.E" +
                        "mpty);", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 168
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 169
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
  testRunner.Then("generated interface member must be", "global::System.Threading.Tasks.Task<string?> MethodAsync();", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 174
  testRunner.And("generated implementation member must be", "public global::System.Threading.Tasks.Task<string?> MethodAsync() => Methods.Meth" +
                        "odHolder.MethodAsync();", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Method without parameters returns Task of non-nullable type")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Method without parameters returns Task of non-nullable type")]
        public void MethodWithoutParametersReturnsTaskOfNon_NullableType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method without parameters returns Task of non-nullable type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 180
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 181
  testRunner.Given("source member declaration", "public static async Task<StringBuilder> MethodAsync() => await Task.FromResult(ne" +
                        "w StringBuilder());", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 185
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 186
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 187
  testRunner.Then("generated interface member must be", "global::System.Threading.Tasks.Task<global::System.Text.StringBuilder> MethodAsyn" +
                        "c();", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
  testRunner.And("generated implementation member must be", "public global::System.Threading.Tasks.Task<global::System.Text.StringBuilder> Met" +
                        "hodAsync() => Methods.MethodHolder.MethodAsync();", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Method without parameters returns Task of nullable type")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Method without parameters returns Task of nullable type")]
        public void MethodWithoutParametersReturnsTaskOfNullableType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Method without parameters returns Task of nullable type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 197
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 198
  testRunner.Given("source member declaration", "public static async Task<StringBuilder?> MethodAsync() => await Task.FromResult(n" +
                        "ew StringBuilder());", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 202
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 203
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 204
  testRunner.Then("generated interface member must be", "global::System.Threading.Tasks.Task<global::System.Text.StringBuilder?> MethodAsy" +
                        "nc();", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 208
  testRunner.And("generated implementation member must be", "public global::System.Threading.Tasks.Task<global::System.Text.StringBuilder?> Me" +
                        "thodAsync() => Methods.MethodHolder.MethodAsync();", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Void method with a parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Void method with a parameter")]
        public void VoidMethodWithAParameter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Void method with a parameter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 214
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 215
  testRunner.Given("source member declaration", "public static void Method(int p) { }", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 219
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 220
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 221
  testRunner.Then("generated interface member must be", "void Method(int p);", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 225
  testRunner.And("generated implementation member must be", "public void Method(int p) => Methods.MethodHolder.Method(p);", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Void method with default parameters")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Void method with default parameters")]
        public void VoidMethodWithDefaultParameters()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Void method with default parameters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 231
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 232
  testRunner.Given("source member declaration", "public static void Method(int p1, string p2 = \"def\", int p3 = 10) { }", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 236
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 237
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 238
  testRunner.Then("generated interface member must be", "void Method(int p1, string p2 = \"def\", int p3 = 10);", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 242
  testRunner.And("generated implementation member must be", "public void Method(int p1, string p2 = \"def\", int p3 = 10) => Methods.MethodHolde" +
                        "r.Method(p1, p2, p3);", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Void method with several keyworded parameters")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Void method with several keyworded parameters")]
        public void VoidMethodWithSeveralKeywordedParameters()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Void method with several keyworded parameters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 248
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 249
  testRunner.Given("source member declaration", "public static void Method(int p1, string[] p2, float? p3, double?[] p4, object[]?" +
                        " p5) { }", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 253
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 254
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 255
  testRunner.Then("generated interface member must be", "void Method(int p1, string[] p2, float? p3, double? [] p4, object[]? p5);", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 259
  testRunner.And("generated implementation member must be", "public void Method(int p1, string[] p2, float? p3, double? [] p4, object[]? p5) =" +
                        "> Methods.MethodHolder.Method(p1, p2, p3, p4, p5);", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Void method with several non-keyworded parameters")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Void method with several non-keyworded parameters")]
        public void VoidMethodWithSeveralNon_KeywordedParameters()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Void method with several non-keyworded parameters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 265
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 266
  testRunner.Given("source member declaration", "public static void Method(DateTime p1, DateTime[] p2, DateTime? p3, DateTime?[] p" +
                        "4, DateTime[]? p5) { }", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 270
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 271
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 272
  testRunner.Then("generated interface member must be", "void Method(global::System.DateTime p1, global::System.DateTime[] p2, global::Sys" +
                        "tem.DateTime? p3, global::System.DateTime? [] p4, global::System.DateTime[]? p5)" +
                        ";", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 276
  testRunner.And("generated implementation member must be", "public void Method(global::System.DateTime p1, global::System.DateTime[] p2, glob" +
                        "al::System.DateTime? p3, global::System.DateTime? [] p4, global::System.DateTime" +
                        "[]? p5) => Methods.MethodHolder.Method(p1, p2, p3, p4, p5);", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Void method with several keyworded generic parameters")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Void method with several keyworded generic parameters")]
        public void VoidMethodWithSeveralKeywordedGenericParameters()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Void method with several keyworded generic parameters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 282
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 283
  testRunner.Given("source member declaration", "public static void Method(List<int> p1, List<string[]> p2, List<float?> p3, List<" +
                        "double?[]> p4, List<object[]?> p5) { }", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 287
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 288
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 289
  testRunner.Then("generated interface member must be", @"void Method(global::System.Collections.Generic.List<int> p1, global::System.Collections.Generic.List<string[]> p2, global::System.Collections.Generic.List<float?> p3, global::System.Collections.Generic.List<double? []> p4, global::System.Collections.Generic.List<object[]?> p5);", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 293
  testRunner.And("generated implementation member must be", @"public void Method(global::System.Collections.Generic.List<int> p1, global::System.Collections.Generic.List<string[]> p2, global::System.Collections.Generic.List<float?> p3, global::System.Collections.Generic.List<double? []> p4, global::System.Collections.Generic.List<object[]?> p5) => Methods.MethodHolder.Method(p1, p2, p3, p4, p5);", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Void method with several non-keyworded generic parameters")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Void method with several non-keyworded generic parameters")]
        public void VoidMethodWithSeveralNon_KeywordedGenericParameters()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Void method with several non-keyworded generic parameters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 299
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 300
  testRunner.Given("source member declaration", "public static void Method(List<DateTime> p1, List<DateTime[]> p2, List<DateTime?>" +
                        " p3, List<DateTime?[]> p4, List<DateTime[]?> p5) { }", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 304
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 305
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 306
  testRunner.Then("generated interface member must be", @"void Method(global::System.Collections.Generic.List<global::System.DateTime> p1, global::System.Collections.Generic.List<global::System.DateTime[]> p2, global::System.Collections.Generic.List<global::System.DateTime?> p3, global::System.Collections.Generic.List<global::System.DateTime? []> p4, global::System.Collections.Generic.List<global::System.DateTime[]?> p5);", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 310
  testRunner.And("generated implementation member must be", @"public void Method(global::System.Collections.Generic.List<global::System.DateTime> p1, global::System.Collections.Generic.List<global::System.DateTime[]> p2, global::System.Collections.Generic.List<global::System.DateTime?> p3, global::System.Collections.Generic.List<global::System.DateTime? []> p4, global::System.Collections.Generic.List<global::System.DateTime[]?> p5) => Methods.MethodHolder.Method(p1, p2, p3, p4, p5);", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Void method with ref/out/in and params parameters")]
        [Xunit.TraitAttribute("FeatureTitle", "Regular method")]
        [Xunit.TraitAttribute("Description", "Void method with ref/out/in and params parameters")]
        public void VoidMethodWithRefOutInAndParamsParameters()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Void method with ref/out/in and params parameters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 316
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 317
  testRunner.Given("source member declaration", "public static void Method(ref int refP, out double? outP, in DateTime inP, params" +
                        " DateTime?[] paramsP) { }", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 321
  testRunner.When("run generator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 322
  testRunner.Then("there must not be generation exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 323
  testRunner.Then("generated interface member must be", "void Method(ref int refP, out double? outP, in global::System.DateTime inP, param" +
                        "s global::System.DateTime? [] paramsP);", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 327
  testRunner.And("generated implementation member must be", "public void Method(ref int refP, out double? outP, in global::System.DateTime inP" +
                        ", params global::System.DateTime? [] paramsP) => Methods.MethodHolder.Method(ref" +
                        " refP, out outP, in inP, paramsP);", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RegularMethodFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RegularMethodFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
