// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace YT.IIGen.Specs.Features.Event
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EventFeature : object, Xunit.IClassFixture<EventFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Event.feature"
#line hidden
        
        public EventFeature(EventFeature.FixtureData fixtureData, YT_IIGen_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Event", "Event", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with EventHandler type")]
        [Xunit.TraitAttribute("FeatureTitle", "Event")]
        [Xunit.TraitAttribute("Description", "Event with EventHandler type")]
        public void EventWithEventHandlerType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with EventHandler type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  testRunner.Given("usings", "using System;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
  testRunner.And("source member declaration", "public event EventHandler Event;", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
  testRunner.Then("generated for interface", "event global::System.EventHandler Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
  testRunner.And("generated for struct implementation", "public event global::System.EventHandler Event { add => _instance.Event += value;" +
                        " remove => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
  testRunner.And("inherited for class implementation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
  testRunner.And("generated for sealed class implementation", "public event global::System.EventHandler Event { add => _instance.Event += value;" +
                        " remove => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with custom type")]
        [Xunit.TraitAttribute("FeatureTitle", "Event")]
        [Xunit.TraitAttribute("Description", "Event with custom type")]
        public void EventWithCustomType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with custom type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
  testRunner.Given("source member declaration", "public event CustomEventHandler Event;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
  testRunner.And("additional namespace declarations", "public delegate void CustomEventHandler(int count, string search);", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
  testRunner.Then("generated for interface", "event global::@Namespace.CustomEventHandler Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
  testRunner.And("generated for struct implementation", "public event global::@Namespace.CustomEventHandler Event { add => _instance.Event" +
                        " += value; remove => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
  testRunner.And("inherited for class implementation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
  testRunner.And("generated for sealed class implementation", "public event global::@Namespace.CustomEventHandler Event { add => _instance.Event" +
                        " += value; remove => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with Action type")]
        [Xunit.TraitAttribute("FeatureTitle", "Event")]
        [Xunit.TraitAttribute("Description", "Event with Action type")]
        public void EventWithActionType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with Action type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 55
  testRunner.Given("usings", "using System;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
  testRunner.And("source member declaration", "public event Action Event;", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
  testRunner.Then("generated for interface", "event global::System.Action Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
  testRunner.And("generated for struct implementation", "public event global::System.Action Event { add => _instance.Event += value; remov" +
                        "e => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
  testRunner.And("inherited for class implementation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
  testRunner.And("generated for sealed class implementation", "public event global::System.Action Event { add => _instance.Event += value; remov" +
                        "e => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with Action type with keyworded generic parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "Event")]
        [Xunit.TraitAttribute("Description", "Event with Action type with keyworded generic parameter")]
        public void EventWithActionTypeWithKeywordedGenericParameter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with Action type with keyworded generic parameter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 80
  testRunner.Given("usings", "using System;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 84
  testRunner.And("source member declaration", "public event Action<int> Event;", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
  testRunner.Then("generated for interface", "event global::System.Action<int> Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
  testRunner.And("generated for struct implementation", "public event global::System.Action<int> Event { add => _instance.Event += value; " +
                        "remove => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
  testRunner.And("inherited for class implementation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
  testRunner.And("generated for sealed class implementation", "public event global::System.Action<int> Event { add => _instance.Event += value; " +
                        "remove => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with Action type with keyworded nullable generic parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "Event")]
        [Xunit.TraitAttribute("Description", "Event with Action type with keyworded nullable generic parameter")]
        public void EventWithActionTypeWithKeywordedNullableGenericParameter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with Action type with keyworded nullable generic parameter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 104
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 105
  testRunner.Given("usings", "using System;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 109
  testRunner.And("source member declaration", "public event Action<string?> Event;", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
  testRunner.Then("generated for interface", "event global::System.Action<string?> Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
  testRunner.And("generated for struct implementation", "public event global::System.Action<string?> Event { add => _instance.Event += val" +
                        "ue; remove => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
  testRunner.And("inherited for class implementation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
  testRunner.And("generated for sealed class implementation", "public event global::System.Action<string?> Event { add => _instance.Event += val" +
                        "ue; remove => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with Action type with non-keyworded generic parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "Event")]
        [Xunit.TraitAttribute("Description", "Event with Action type with non-keyworded generic parameter")]
        public void EventWithActionTypeWithNon_KeywordedGenericParameter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with Action type with non-keyworded generic parameter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 130
  testRunner.Given("usings", "using System;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 134
  testRunner.And("source member declaration", "public event Action<DateTime> Event;", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 139
  testRunner.Then("generated for interface", "event global::System.Action<global::System.DateTime> Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 143
  testRunner.And("generated for struct implementation", "public event global::System.Action<global::System.DateTime> Event { add => _insta" +
                        "nce.Event += value; remove => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
  testRunner.And("inherited for class implementation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
  testRunner.And("generated for sealed class implementation", "public event global::System.Action<global::System.DateTime> Event { add => _insta" +
                        "nce.Event += value; remove => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with Action type with non-keyworded nullable generic parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "Event")]
        [Xunit.TraitAttribute("Description", "Event with Action type with non-keyworded nullable generic parameter")]
        public void EventWithActionTypeWithNon_KeywordedNullableGenericParameter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with Action type with non-keyworded nullable generic parameter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 155
  testRunner.Given("usings", "using System;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 159
  testRunner.And("source member declaration", "public event Action<DayOfWeek?> Event;", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 164
  testRunner.Then("generated for interface", "event global::System.Action<global::System.DayOfWeek?> Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 168
  testRunner.And("generated for struct implementation", "public event global::System.Action<global::System.DayOfWeek?> Event { add => _ins" +
                        "tance.Event += value; remove => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
  testRunner.And("inherited for class implementation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
  testRunner.And("generated for sealed class implementation", "public event global::System.Action<global::System.DayOfWeek?> Event { add => _ins" +
                        "tance.Event += value; remove => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with Func")]
        [Xunit.TraitAttribute("FeatureTitle", "Event")]
        [Xunit.TraitAttribute("Description", "Event with Func")]
        public void EventWithFunc()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with Func", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 179
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 180
  testRunner.Given("usings", "using System;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 184
  testRunner.And("source member declaration", "public event Func<DayOfWeek?, double, int?> Event;", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 188
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 189
  testRunner.Then("generated for interface", "event global::System.Func<global::System.DayOfWeek?, double, int?> Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 193
  testRunner.And("generated for struct implementation", "public event global::System.Func<global::System.DayOfWeek?, double, int?> Event {" +
                        " add => _instance.Event += value; remove => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 197
  testRunner.And("inherited for class implementation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 198
  testRunner.And("generated for sealed class implementation", "public event global::System.Func<global::System.DayOfWeek?, double, int?> Event {" +
                        " add => _instance.Event += value; remove => _instance.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                EventFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                EventFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
