// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace YT.IIGen.Specs.Features.Event
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class StaticEventFeature : object, Xunit.IClassFixture<StaticEventFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "StaticEvent.feature"
#line hidden
        
        public StaticEventFeature(StaticEventFeature.FixtureData fixtureData, YT_IIGen_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Event", "Static event", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with EventHandler type")]
        [Xunit.TraitAttribute("FeatureTitle", "Static event")]
        [Xunit.TraitAttribute("Description", "Event with EventHandler type")]
        public void EventWithEventHandlerType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with EventHandler type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  testRunner.Given("usings", "using System;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
  testRunner.And("source member declaration", "public static event EventHandler Event;", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
  testRunner.Then("generated for interface", "event global::System.EventHandler Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
  testRunner.And("generated for struct implementation", "public event global::System.EventHandler Event { add => @Namespace.@TypeName.Even" +
                        "t += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
  testRunner.And("generated for class implementation", "public new event global::System.EventHandler Event { add => @Namespace.@TypeName." +
                        "Event += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
  testRunner.And("generated for sealed class implementation", "public event global::System.EventHandler Event { add => @Namespace.@TypeName.Even" +
                        "t += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
  testRunner.And("generated for static class implementation", "public event global::System.EventHandler Event { add => @Namespace.@TypeName.Even" +
                        "t += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with custom type")]
        [Xunit.TraitAttribute("FeatureTitle", "Static event")]
        [Xunit.TraitAttribute("Description", "Event with custom type")]
        public void EventWithCustomType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with custom type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 37
  testRunner.Given("source member declaration", "public static event CustomEventHandler Event;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
  testRunner.And("additional namespace declarations", "public delegate void CustomEventHandler(int count, string search);", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
  testRunner.Then("generated for interface", "event global::@Namespace.CustomEventHandler Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
  testRunner.And("generated for struct implementation", "public event global::@Namespace.CustomEventHandler Event { add => @Namespace.@Typ" +
                        "eName.Event += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
  testRunner.And("generated for class implementation", "public new event global::@Namespace.CustomEventHandler Event { add => @Namespace." +
                        "@TypeName.Event += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
  testRunner.And("generated for sealed class implementation", "public event global::@Namespace.CustomEventHandler Event { add => @Namespace.@Typ" +
                        "eName.Event += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
  testRunner.And("generated for static class implementation", "public event global::@Namespace.CustomEventHandler Event { add => @Namespace.@Typ" +
                        "eName.Event += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with Action type")]
        [Xunit.TraitAttribute("FeatureTitle", "Static event")]
        [Xunit.TraitAttribute("Description", "Event with Action type")]
        public void EventWithActionType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with Action type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 69
  testRunner.Given("usings", "using System;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 73
  testRunner.And("source member declaration", "public static event Action Event;", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
  testRunner.Then("generated for interface", "event global::System.Action Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
  testRunner.And("generated for struct implementation", "public event global::System.Action Event { add => @Namespace.@TypeName.Event += v" +
                        "alue; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
  testRunner.And("generated for class implementation", "public new event global::System.Action Event { add => @Namespace.@TypeName.Event " +
                        "+= value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
  testRunner.And("generated for sealed class implementation", "public event global::System.Action Event { add => @Namespace.@TypeName.Event += v" +
                        "alue; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
  testRunner.And("generated for static class implementation", "public event global::System.Action Event { add => @Namespace.@TypeName.Event += v" +
                        "alue; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with Action type with keyworded generic parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "Static event")]
        [Xunit.TraitAttribute("Description", "Event with Action type with keyworded generic parameter")]
        public void EventWithActionTypeWithKeywordedGenericParameter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with Action type with keyworded generic parameter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 101
  testRunner.Given("usings", "using System;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 105
  testRunner.And("source member declaration", "public static event Action<int> Event;", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 110
  testRunner.Then("generated for interface", "event global::System.Action<int> Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 114
  testRunner.And("generated for struct implementation", "public event global::System.Action<int> Event { add => @Namespace.@TypeName.Event" +
                        " += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
  testRunner.And("generated for class implementation", "public new event global::System.Action<int> Event { add => @Namespace.@TypeName.E" +
                        "vent += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
  testRunner.And("generated for sealed class implementation", "public event global::System.Action<int> Event { add => @Namespace.@TypeName.Event" +
                        " += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
  testRunner.And("generated for static class implementation", "public event global::System.Action<int> Event { add => @Namespace.@TypeName.Event" +
                        " += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with Action type with keyworded nullable generic parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "Static event")]
        [Xunit.TraitAttribute("Description", "Event with Action type with keyworded nullable generic parameter")]
        public void EventWithActionTypeWithKeywordedNullableGenericParameter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with Action type with keyworded nullable generic parameter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 133
  testRunner.Given("usings", "using System;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 137
  testRunner.And("source member declaration", "public static event Action<string?> Event;", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 142
  testRunner.Then("generated for interface", "event global::System.Action<string?> Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 146
  testRunner.And("generated for struct implementation", "public event global::System.Action<string?> Event { add => @Namespace.@TypeName.E" +
                        "vent += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 150
  testRunner.And("generated for class implementation", "public new event global::System.Action<string?> Event { add => @Namespace.@TypeNa" +
                        "me.Event += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
  testRunner.And("generated for sealed class implementation", "public event global::System.Action<string?> Event { add => @Namespace.@TypeName.E" +
                        "vent += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 158
  testRunner.And("generated for static class implementation", "public event global::System.Action<string?> Event { add => @Namespace.@TypeName.E" +
                        "vent += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with Action type with non-keyworded generic parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "Static event")]
        [Xunit.TraitAttribute("Description", "Event with Action type with non-keyworded generic parameter")]
        public void EventWithActionTypeWithNon_KeywordedGenericParameter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with Action type with non-keyworded generic parameter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 164
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 165
  testRunner.Given("usings", "using System;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 169
  testRunner.And("source member declaration", "public static event Action<DateTime> Event;", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 174
  testRunner.Then("generated for interface", "event global::System.Action<global::System.DateTime> Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 178
  testRunner.And("generated for struct implementation", "public event global::System.Action<global::System.DateTime> Event { add => @Names" +
                        "pace.@TypeName.Event += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 182
  testRunner.And("generated for class implementation", "public new event global::System.Action<global::System.DateTime> Event { add => @N" +
                        "amespace.@TypeName.Event += value; remove => @Namespace.@TypeName.Event -= value" +
                        "; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
  testRunner.And("generated for sealed class implementation", "public event global::System.Action<global::System.DateTime> Event { add => @Names" +
                        "pace.@TypeName.Event += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 190
  testRunner.And("generated for static class implementation", "public event global::System.Action<global::System.DateTime> Event { add => @Names" +
                        "pace.@TypeName.Event += value; remove => @Namespace.@TypeName.Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with Action type with non-keyworded nullable generic parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "Static event")]
        [Xunit.TraitAttribute("Description", "Event with Action type with non-keyworded nullable generic parameter")]
        public void EventWithActionTypeWithNon_KeywordedNullableGenericParameter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with Action type with non-keyworded nullable generic parameter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 196
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 197
  testRunner.Given("usings", "using System;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 201
  testRunner.And("source member declaration", "public static event Action<DayOfWeek?> Event;", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 205
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 206
  testRunner.Then("generated for interface", "event global::System.Action<global::System.DayOfWeek?> Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
  testRunner.And("generated for struct implementation", "public event global::System.Action<global::System.DayOfWeek?> Event { add => @Nam" +
                        "espace.@TypeName.Event += value; remove => @Namespace.@TypeName.Event -= value; " +
                        "}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 214
  testRunner.And("generated for class implementation", "public new event global::System.Action<global::System.DayOfWeek?> Event { add => " +
                        "@Namespace.@TypeName.Event += value; remove => @Namespace.@TypeName.Event -= val" +
                        "ue; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
  testRunner.And("generated for sealed class implementation", "public event global::System.Action<global::System.DayOfWeek?> Event { add => @Nam" +
                        "espace.@TypeName.Event += value; remove => @Namespace.@TypeName.Event -= value; " +
                        "}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 222
  testRunner.And("generated for static class implementation", "public event global::System.Action<global::System.DayOfWeek?> Event { add => @Nam" +
                        "espace.@TypeName.Event += value; remove => @Namespace.@TypeName.Event -= value; " +
                        "}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Event with Func")]
        [Xunit.TraitAttribute("FeatureTitle", "Static event")]
        [Xunit.TraitAttribute("Description", "Event with Func")]
        public void EventWithFunc()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Event with Func", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 228
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 229
  testRunner.Given("usings", "using System;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 233
  testRunner.And("source member declaration", "public static event Func<DayOfWeek?, double, int?> Event;", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 237
  testRunner.When("run generator for event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 238
  testRunner.Then("generated for interface", "event global::System.Func<global::System.DayOfWeek?, double, int?> Event;", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 242
  testRunner.And("generated for struct implementation", "public event global::System.Func<global::System.DayOfWeek?, double, int?> Event {" +
                        " add => @Namespace.@TypeName.Event += value; remove => @Namespace.@TypeName.Even" +
                        "t -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 246
  testRunner.And("generated for class implementation", "public new event global::System.Func<global::System.DayOfWeek?, double, int?> Eve" +
                        "nt { add => @Namespace.@TypeName.Event += value; remove => @Namespace.@TypeName." +
                        "Event -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 250
  testRunner.And("generated for sealed class implementation", "public event global::System.Func<global::System.DayOfWeek?, double, int?> Event {" +
                        " add => @Namespace.@TypeName.Event += value; remove => @Namespace.@TypeName.Even" +
                        "t -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 254
  testRunner.And("generated for static class implementation", "public event global::System.Func<global::System.DayOfWeek?, double, int?> Event {" +
                        " add => @Namespace.@TypeName.Event += value; remove => @Namespace.@TypeName.Even" +
                        "t -= value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                StaticEventFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                StaticEventFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
