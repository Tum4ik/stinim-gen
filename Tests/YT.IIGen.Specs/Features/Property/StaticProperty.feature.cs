// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace YT.IIGen.Specs.Features.Property
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class StaticPropertyFeature : object, Xunit.IClassFixture<StaticPropertyFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "StaticProperty.feature"
#line hidden
        
        public StaticPropertyFeature(StaticPropertyFeature.FixtureData fixtureData, YT_IIGen_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Property", "Static property", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Property with only getter")]
        [Xunit.TraitAttribute("FeatureTitle", "Static property")]
        [Xunit.TraitAttribute("Description", "Property with only getter")]
        public void PropertyWithOnlyGetter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Property with only getter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  testRunner.Given("source member declaration", "public static int Property { get; }", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
  testRunner.When("run generator for property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
  testRunner.Then("generated for interface", "int Property { get; }", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
  testRunner.And("generated for struct implementation", "public int Property { get => @Namespace.@TypeName.Property; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
  testRunner.And("generated for class implementation", "public new int Property { get => @Namespace.@TypeName.Property; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
  testRunner.And("generated for sealed class implementation", "public int Property { get => @Namespace.@TypeName.Property; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
  testRunner.And("generated for static class implementation", "public int Property { get => @Namespace.@TypeName.Property; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Property with only setter")]
        [Xunit.TraitAttribute("FeatureTitle", "Static property")]
        [Xunit.TraitAttribute("Description", "Property with only setter")]
        public void PropertyWithOnlySetter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Property with only setter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 33
  testRunner.Given("source member declaration", "private static float? _property;\r\npublic static float? Property { set => _propert" +
                        "y = value; }", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
  testRunner.When("run generator for property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
  testRunner.Then("generated for interface", "float? Property { set; }", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
  testRunner.And("generated for struct implementation", "public float? Property { set => @Namespace.@TypeName.Property = value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
  testRunner.And("generated for class implementation", "public new float? Property { set => @Namespace.@TypeName.Property = value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
  testRunner.And("generated for sealed class implementation", "public float? Property { set => @Namespace.@TypeName.Property = value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
  testRunner.And("generated for static class implementation", "public float? Property { set => @Namespace.@TypeName.Property = value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Property with getter and setter")]
        [Xunit.TraitAttribute("FeatureTitle", "Static property")]
        [Xunit.TraitAttribute("Description", "Property with getter and setter")]
        public void PropertyWithGetterAndSetter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Property with getter and setter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
  testRunner.Given("usings", "using System.IO;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 66
  testRunner.And("source member declaration", "public static Stream Property { get; set; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
  testRunner.When("run generator for property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
  testRunner.Then("generated for interface", "global::System.IO.Stream Property { get; set; }", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
  testRunner.And("generated for struct implementation", "public global::System.IO.Stream Property { get => @Namespace.@TypeName.Property; " +
                        "set => @Namespace.@TypeName.Property = value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
  testRunner.And("generated for class implementation", "public new global::System.IO.Stream Property { get => @Namespace.@TypeName.Proper" +
                        "ty; set => @Namespace.@TypeName.Property = value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
  testRunner.And("generated for sealed class implementation", "public global::System.IO.Stream Property { get => @Namespace.@TypeName.Property; " +
                        "set => @Namespace.@TypeName.Property = value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
  testRunner.And("generated for static class implementation", "public global::System.IO.Stream Property { get => @Namespace.@TypeName.Property; " +
                        "set => @Namespace.@TypeName.Property = value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Property with getter and private setter")]
        [Xunit.TraitAttribute("FeatureTitle", "Static property")]
        [Xunit.TraitAttribute("Description", "Property with getter and private setter")]
        public void PropertyWithGetterAndPrivateSetter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Property with getter and private setter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 94
  testRunner.Given("usings", "using System.IO;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 98
  testRunner.And("source member declaration", "public static Stream? Property { get; private set; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
  testRunner.When("run generator for property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
  testRunner.Then("generated for interface", "global::System.IO.Stream? Property { get; }", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 107
  testRunner.And("generated for struct implementation", "public global::System.IO.Stream? Property { get => @Namespace.@TypeName.Property;" +
                        " }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
  testRunner.And("generated for class implementation", "public new global::System.IO.Stream? Property { get => @Namespace.@TypeName.Prope" +
                        "rty; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
  testRunner.And("generated for sealed class implementation", "public global::System.IO.Stream? Property { get => @Namespace.@TypeName.Property;" +
                        " }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
  testRunner.And("generated for static class implementation", "public global::System.IO.Stream? Property { get => @Namespace.@TypeName.Property;" +
                        " }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Property with getter and protected setter")]
        [Xunit.TraitAttribute("FeatureTitle", "Static property")]
        [Xunit.TraitAttribute("Description", "Property with getter and protected setter")]
        public void PropertyWithGetterAndProtectedSetter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Property with getter and protected setter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 125
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 126
  testRunner.Given("usings", "using System.IO;", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 130
  testRunner.And("source member declaration", "public static Stream? Property { get; protected set; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
  testRunner.When("run generator for property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 135
  testRunner.Then("generated for interface", "global::System.IO.Stream? Property { get; }", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
  testRunner.And("generated for struct implementation", "public global::System.IO.Stream? Property { get => @Namespace.@TypeName.Property;" +
                        " }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
  testRunner.And("generated for class implementation", "public new global::System.IO.Stream? Property { get => @Namespace.@TypeName.Prope" +
                        "rty; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
  testRunner.And("generated for sealed class implementation", "public global::System.IO.Stream? Property { get => @Namespace.@TypeName.Property;" +
                        " }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Property with private getter and setter")]
        [Xunit.TraitAttribute("FeatureTitle", "Static property")]
        [Xunit.TraitAttribute("Description", "Property with private getter and setter")]
        public void PropertyWithPrivateGetterAndSetter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Property with private getter and setter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 153
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 154
  testRunner.Given("source member declaration", "public static float? Property { private get; set; }", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 158
  testRunner.When("run generator for property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 159
  testRunner.Then("generated for interface", "float? Property { set; }", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 163
  testRunner.And("generated for struct implementation", "public float? Property { set => @Namespace.@TypeName.Property = value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
  testRunner.And("generated for class implementation", "public new float? Property { set => @Namespace.@TypeName.Property = value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
  testRunner.And("generated for sealed class implementation", "public float? Property { set => @Namespace.@TypeName.Property = value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
  testRunner.And("generated for static class implementation", "public float? Property { set => @Namespace.@TypeName.Property = value; }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                StaticPropertyFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                StaticPropertyFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
